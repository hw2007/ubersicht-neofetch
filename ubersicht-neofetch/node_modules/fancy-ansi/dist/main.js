import y from "escape-html";
import { x as i } from "./colors-B3F3SizO.js";
function g({ onlyFirst: l = !1 } = {}) {
  const r = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"
  ].join("|");
  return new RegExp(r, l ? void 0 : "g");
}
const $ = /^(?:\x1b\[([\x3c-\x3f]?)([\d;]*)([\x20-\x2f]?[\x40-\x7e]))|(?:\x1b\[[\x20-\x7e]*([\x00-\x1f:]))/, p = /^\x1b\]8;[\x20-\x3a\x3c-\x7e]*;([\x21-\x7e]{0,512})(?:(?:\x1b\\)|(?:\x07))([\x20-\x7e]+)\x1b\]8;;(?:(?:\x1b\\)|(?:\x07))/, m = /(?:(\x1b\\)|(\x07))|([\x00-\x06]|[\x08-\x1a]|[\x1c-\x1f])/g;
class w {
  constructor(n) {
    this.lastIndex = 0, this.input = n;
  }
  /**
   * Get the next parsed packet
   * @returns {IteratorResult<Packet>} The next parsed packet
   */
  next() {
    const n = this.input.substring(this.lastIndex), r = n.length;
    if (r === 0)
      return { value: null, done: !0 };
    const t = { kind: 0, text: "", url: "" }, a = n.indexOf("\x1B");
    if (a === -1)
      return t.kind = 1, t.text = n, this.lastIndex += r, { value: t, done: !1 };
    if (a > 0)
      return t.kind = 1, t.text = n.slice(0, a), this.lastIndex += a, { value: t, done: !1 };
    if (r < 3)
      return { value: null, done: !0 };
    const s = n.charAt(1);
    if (s !== "[" && s !== "]" && s !== "(")
      return t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 };
    if (s === "[") {
      const o = n.match($);
      return o === null ? { value: null, done: !0 } : o[4] ? (t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 }) : (o[1] !== "" || o[3] !== "m" ? t.kind = 3 : t.kind = 4, t.text = o[2], this.lastIndex += o[0].length, { value: t, done: !1 });
    }
    if (s === "]") {
      if (r < 4)
        return { value: null, done: !0 };
      if (n.charAt(2) !== "8" || n.charAt(3) !== ";")
        return t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 };
      const o = new RegExp(m);
      {
        const d = o.exec(n);
        if (d === null)
          return { value: null, done: !0 };
        if (d[3])
          return t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 };
      }
      {
        const d = o.exec(n);
        if (d === null)
          return { value: null, done: !0 };
        if (d[3])
          return t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 };
      }
      const f = n.match(p);
      return f === null ? (t.kind = 2, t.text = n[0], this.lastIndex += 1, { value: t, done: !1 }) : (t.kind = 5, t.url = f[1], t.text = f[2], this.lastIndex += f[0].length, { value: t, done: !1 });
    }
    return s === "(" ? (t.kind = 3, this.lastIndex += 3, { value: t, done: !1 }) : { value: null, done: !0 };
  }
  [Symbol.iterator]() {
    return this;
  }
}
const x = 14, h = new Array(x);
h[
  0
  /* StyleAttrsKeys.BackgroundColor */
] = "background-color";
h[
  1
  /* StyleAttrsKeys.Color */
] = "color";
h[
  2
  /* StyleAttrsKeys.FontFamily */
] = "font-family";
h[
  3
  /* StyleAttrsKeys.FontSize */
] = "font-size";
h[
  4
  /* StyleAttrsKeys.FontStyle */
] = "font-style";
h[
  5
  /* StyleAttrsKeys.FontWeight */
] = "font-weight";
h[
  6
  /* StyleAttrsKeys.Opacity */
] = "opacity";
h[
  7
  /* StyleAttrsKeys.Outline */
] = "outline";
h[
  8
  /* StyleAttrsKeys.TextDecoration */
] = "text-decoration";
h[
  9
  /* StyleAttrsKeys.TextDecorationColor */
] = "text-decoration-color";
h[
  10
  /* StyleAttrsKeys.TextDecorationLine */
] = "text-decoration-line";
h[
  11
  /* StyleAttrsKeys.TextDecorationStyle */
] = "text-decoration-style";
h[
  12
  /* StyleAttrsKeys.VerticalAlign */
] = "vertical-align";
h[
  13
  /* StyleAttrsKeys.Visibility */
] = "visibility";
class u {
  constructor() {
    this.attrArray = new Array(x), this._size = 0;
  }
  /**
   * Get attr
   * @param {StyleAttrKeys} key
   */
  get(n) {
    return this.attrArray[n];
  }
  /**
   *
   * @param {StyleAttrsKeys} key
   * @param {string} value
   */
  set(n, r) {
    const t = this.attrArray[n];
    this.attrArray[n] = r, t === void 0 && r !== void 0 && (this._size += 1);
  }
  /**
   * Delete attrs
   * @param {StyleAttrKeys} key
   */
  delete(n) {
    const r = this.attrArray[n];
    this.attrArray[n] = void 0, r !== void 0 && (this._size -= 1);
  }
  /**
   * Merge values from another object into this one
   * @param {StyleAttrs} attrs - The attributes to merge into instance
   */
  update(n) {
    for (const r in n)
      if (n.hasOwnProperty(r)) {
        const t = n[r];
        this.attrArray[r] = t, t !== void 0 && (this._size += 1);
      }
  }
  /**
   * Delete all style attributes
   */
  clear() {
    this.attrArray.fill(void 0), this._size = 0;
  }
  /**
   * Get number of non-empty attributes
   * @returns {number} Number of non-empty attributes
   */
  get size() {
    return this._size;
  }
  /**
   * Convert object to string for insertion to `style` elelment attribute
   * @returns {string} Semi-colon separated list of key:val pairs
   */
  toString() {
    let n = "";
    return this.attrArray.forEach((r, t) => {
      r !== void 0 && (n += `${h[t]}:${r};`);
    }), n;
  }
  /**
   * Remove attributes at `keys` if present
   * @param {StyleAttrsKeys} key
   * @returns {StyleAttrsModifierFn} Modifier function
   */
  static delete(...n) {
    return (r) => {
      n.forEach((t) => {
        r.delete(t);
      });
    };
  }
  /**
   * Append `value` to space separated list if not present
   * @param {StyleAttrsKeys} key
   * @param {string} value
   * @returns {StyleAttrsModifierFn} Modifier function
   */
  static appendVal(n, r) {
    return (t) => {
      const a = t.get(n), s = a ? a.split(" ") : [];
      s.includes(r) || s.push(r), t.set(n, s.join(" "));
    };
  }
  /**
   * Remove `value` from space separated list if present
   * @param {StyleAttrsKeys} key
   * @param {string} val
   * @returns {StyleAttrsModifierFn} Modifier function
   */
  static removeVal(n, r) {
    return (t) => {
      const a = t.get(n);
      let s = a ? a.split(" ") : [];
      s = s.filter((o) => o !== r), s.length ? t.set(n, s.join(" ")) : t.delete(n);
    };
  }
}
const A = g(), k = g({ onlyFirst: !0 }), e = new Array(108);
e[0] = { 5: "var(--ansi-bold-font-weight, 600)" };
e[1] = { 5: "var(--ansi-bold-font-weight, 600)" };
e[2] = { 6: "var(--ansi-dim-opacity, 0.7)" };
e[3] = { 4: "italic" };
e[4] = u.appendVal(8, "underline");
e[8] = { 13: "hidden" };
e[9] = u.appendVal(8, "line-through");
e[10] = u.delete(
  2
  /* StyleAttrsKeys.FontFamily */
);
e[11] = { 2: "var(--ansi-font-1)" };
e[12] = { 2: "var(--ansi-font-2)" };
e[13] = { 2: "var(--ansi-font-3)" };
e[14] = { 2: "var(--ansi-font-4)" };
e[15] = { 2: "var(--ansi-font-5)" };
e[16] = { 2: "var(--ansi-font-6)" };
e[17] = { 2: "var(--ansi-font-7)" };
e[18] = { 2: "var(--ansi-font-8)" };
e[19] = { 2: "var(--ansi-font-9)" };
e[21] = { 10: "underline", 11: "double" };
e[22] = u.delete(
  5
  /* StyleAttrsKeys.FontWeight */
);
e[23] = u.delete(
  4
  /* StyleAttrsKeys.FontStyle */
);
e[24] = u.removeVal(8, "underline");
e[28] = u.delete(
  13
  /* StyleAttrsKeys.Visibility */
);
e[29] = u.removeVal(8, "line-through");
e[30] = { 1: `var(--ansi-black, ${i.black})` };
e[31] = { 1: `var(--ansi-red, ${i.red})` };
e[32] = { 1: `var(--ansi-green, ${i.green})` };
e[33] = { 1: `var(--ansi-yellow, ${i.yellow})` };
e[34] = { 1: `var(--ansi-blue, ${i.blue})` };
e[35] = { 1: `var(--ansi-magenta, ${i.magenta})` };
e[36] = { 1: `var(--ansi-cyan, ${i.cyan})` };
e[37] = { 1: `var(--ansi-white, ${i.white})` };
e[39] = u.delete(
  1
  /* StyleAttrsKeys.Color */
);
e[40] = { 0: `var(--ansi-black, ${i.black})` };
e[41] = { 0: `var(--ansi-red, ${i.red})` };
e[42] = { 0: `var(--ansi-green, ${i.green})` };
e[43] = { 0: `var(--ansi-yellow, ${i.yellow})` };
e[44] = { 0: `var(--ansi-blue, ${i.blue})` };
e[45] = { 0: `var(--ansi-magenta, ${i.magenta})` };
e[46] = { 0: `var(--ansi-cyan, ${i.cyan})` };
e[47] = { 0: `var(--ansi-white, ${i.white})` };
e[49] = u.delete(
  0
  /* StyleAttrsKeys.BackgroundColor */
);
e[51] = { 7: "var(--ansi-frame-outline, 1px solid)" };
e[53] = u.appendVal(8, "overline");
e[54] = u.delete(
  7
  /* StyleAttrsKeys.Outline */
);
e[55] = u.removeVal(8, "overline");
e[59] = u.delete(
  9
  /* StyleAttrsKeys.TextDecorationColor */
);
e[73] = { 12: "super", 3: "var(--ansi-superscript-font-size, 80%)" };
e[74] = { 12: "sub", 3: "var(--ansi-subscript-font-size, 80%)" };
e[75] = u.delete(
  12,
  3
  /* StyleAttrsKeys.FontSize */
);
e[90] = { 1: `var(--ansi-bright-black, ${i[
  "bright-black"
  /* StandardColorKeys.BrightBlack */
]})` };
e[91] = { 1: `var(--ansi-bright-red, ${i[
  "bright-red"
  /* StandardColorKeys.BrightRed */
]})` };
e[92] = { 1: `var(--ansi-bright-green, ${i[
  "bright-green"
  /* StandardColorKeys.BrightGreen */
]})` };
e[93] = { 1: `var(--ansi-bright-yellow, ${i[
  "bright-yellow"
  /* StandardColorKeys.BrightYellow */
]})` };
e[94] = { 1: `var(--ansi-bright-blue, ${i[
  "bright-blue"
  /* StandardColorKeys.BrightBlue */
]})` };
e[95] = { 1: `var(--ansi-bright-magenta, ${i[
  "bright-magenta"
  /* StandardColorKeys.BrightMagenta */
]})` };
e[96] = { 1: `var(--ansi-bright-cyan, ${i[
  "bright-cyan"
  /* StandardColorKeys.BrightCyan */
]})` };
e[97] = { 1: `var(--ansi-bright-white, ${i[
  "bright-white"
  /* StandardColorKeys.BrightWhite */
]})` };
e[100] = { 0: `var(--ansi-bright-black, ${i[
  "bright-black"
  /* StandardColorKeys.BrightBlack */
]})` };
e[101] = { 0: `var(--ansi-bright-red, ${i[
  "bright-red"
  /* StandardColorKeys.BrightRed */
]})` };
e[102] = { 0: `var(--ansi-bright-green, ${i[
  "bright-green"
  /* StandardColorKeys.BrightGreen */
]})` };
e[103] = { 0: `var(--ansi-bright-yellow, ${i[
  "bright-yellow"
  /* StandardColorKeys.BrightYellow */
]})` };
e[104] = { 0: `var(--ansi-bright-blue, ${i[
  "bright-blue"
  /* StandardColorKeys.BrightBlue */
]})` };
e[105] = { 0: `var(--ansi-bright-magenta, ${i[
  "bright-magenta"
  /* StandardColorKeys.BrightMagenta */
]})` };
e[106] = { 0: `var(--ansi-bright-cyan, ${i[
  "bright-cyan"
  /* StandardColorKeys.BrightCyan */
]})` };
e[107] = { 0: `var(--ansi-bright-white, ${i[
  "bright-white"
  /* StandardColorKeys.BrightWhite */
]})` };
const c = new Array(16);
c[0] = "black";
c[1] = "red";
c[2] = "green";
c[3] = "yellow";
c[4] = "blue";
c[5] = "magenta";
c[6] = "cyan";
c[7] = "white";
c[8] = "bright-black";
c[9] = "bright-red";
c[10] = "bright-green";
c[11] = "bright-yellow";
c[12] = "bright-blue";
c[13] = "bright-magenta";
c[14] = "bright-cyan";
c[15] = "bright-white";
function b(l) {
  switch (l) {
    case "38":
      return 1;
    case "48":
      return 0;
    case "58":
      return 9;
    default:
      throw new Error("not implemented");
  }
}
function I(l, n) {
  const r = l.text.split(";");
  if (r.length !== 3)
    return;
  const t = b(r[0]), a = parseInt(r[2], 10);
  if (0 <= a && a <= 15) {
    const s = c[a];
    n.set(t, `var(--ansi-${s}, ${i[s]})`);
  } else if (16 <= a && a <= 231) {
    const s = a - 16, o = [0, 95, 135, 175, 215, 255], f = o[s / 36 % 6 | 0], d = o[s / 6 % 6 | 0], v = o[s % 6];
    n.set(t, `rgb(${f},${d},${v})`);
  } else if (232 <= a && a <= 255) {
    const s = 8 + (a - 232) * 10;
    n.set(t, `var(--ansi-gray-${256 - a}, rgb(${s},${s},${s}))`);
  }
}
function z(l, n) {
  const r = l.text.split(";");
  if (r.length !== 5)
    return;
  const t = b(r[0]), [, , a, s, o] = r;
  n.set(t, `rgb(${a},${s},${o})`);
}
function R(l, n) {
  if (/^(38|48|58);(2|5);/.test(l.text)) {
    l.text[3] === "2" ? z(l, n) : I(l, n);
    return;
  }
  l.text.split(";").forEach((r) => {
    const t = parseInt(r || "0", 10);
    if (t === 0) {
      n.clear();
      return;
    }
    const a = e[t];
    a && (typeof a == "function" ? a(n) : n.update(a));
  });
}
function _(l) {
  return k.test(l);
}
function E(l) {
  return l.replaceAll(A, "");
}
class P {
  /**
   * Convert input string with ansi markup to browser-safe HTML
   * @param {string} input
   * @returns {string} A browser-safe HTML string with converted ANSI
   */
  toHtml(n) {
    const r = new u();
    let t = "", a = !1;
    return Array.from(new w(n)).forEach((s) => {
      switch (s.kind) {
        case 1:
          t += y(s.text);
          break;
        case 4:
          a && (t += "</span>", a = !1), R(s, r), r.size && (t += `<span style="${r.toString()}">`, a = !0);
          break;
      }
    }), a && (t += "</span>"), t;
  }
}
export {
  P as FancyAnsi,
  _ as hasAnsi,
  E as stripAnsi
};
